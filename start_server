#!/bin/node 

const http = require('http');
const fs = require('fs');
const { spawn } = require("child_process");

var state = {
	"status": 0,
	"percent": 0,
	"players": [],
	"permissions": {
		"allow_time_set_day": false,
		"allow_time_set_night": false,
		"allow_weather_clear": false,
		"allow_tp": false
	}
};

function load_settings() {
	try {
		return fs.readFileSync("settings.json", "utf8");
	} catch (err) {
		console.error(err);
		return null;
	}
}

var settings = JSON.parse(load_settings());

var start_requested = false;
var server_running = false;

function load_html() {
	try {
		return fs.readFileSync(settings.html, settings.html_encoding);
	} catch (err) {
		console.error(err);
		return null;
	}
}

var html_cache = load_html();

var proc = null;

const server = http.createServer(function(req, res) {
	if(req.method === 'POST') {
		if(req.url == "/click") {
			start_requested = true;
		} 

		if(proc != null) {
			if (req.url.startsWith("/stop") && settings.password.length > 0) {
				var pass = req.url.substring(6);
				if(pass == settings.password) {
					streamWrite(proc.stdin, 'stop\n');
					streamEnd(proc.stdin);
				}
			} else if (settings.permissions.allow_time_set_day && req.url == "/day") {
				streamWrite(proc.stdin, 'time set day\n');
			} else if (settings.permissions.allow_time_set_night && req.url == "/night") {
				streamWrite(proc.stdin, 'time set night\n');
			} else if (settings.permissions.allow_weather_clear && req.url == "/wc") {
				streamWrite(proc.stdin, 'weather clear\n');
			} else if (settings.permissions.allow_tp && req.url.startsWith("/tp")) {
				var url_parts = req.url.split("-");
				streamWrite(proc.stdin, "tp " + url_parts[1] + " " + url_parts[2] + '\n');
			}
		}

		res.write('{"status": "ok"}');
		res.end();
	} else {
		if(req.url == '/check') {
			res.end(JSON.stringify(state));
		} else {
			if(!settings.enable_html_caching) {
				res.end(load_html());
			} else {
				res.end(html_cache);
			}
		}
	}
});

server.listen(settings.port, function() {
	console.log('Server running at http://127.0.0.1:' + settings.port);
});

function proc_stdout(dat) {
	if(dat.includes("Preparing spawn area")) {
		state.percent = parseInt(dat.substring(dat.length - 4, dat.length - 2));
		state.status = 2;
	} else if (dat.includes('For help, type "help"')) {
		state.percent = 0;
		state.status = 3;
	} else if (dat.includes(' joined the game')) {
		parts = dat.split(':');
		finalPart = parts[parts.length - 1].substring(1);
		playerName = finalPart.substring(0, finalPart.length - 17);

		state.players.push(playerName);

	} else if (dat.includes(' left the game')) {
		parts = dat.split(':');
		finalPart = parts[parts.length - 1].substring(1);
		playerName = finalPart.substring(0, finalPart.length - 15);

		newPlayerArr = [];

		for(var i = 0; i < state.players.length; i++) {
			if(!(state.players[i].normalize()  === playerName.normalize())) {
				newPlayerArr.push(state.players[i]);
			}
		}

		state.players = newPlayerArr;
	}

	if(dat.endsWith("\n")) {
		dat = dat.substring(0, dat.length - 1);
	}

	console.log(dat);
}

function serverStarter() {
	if(start_requested && !server_running) {
		server_running = true;

		process.chdir('./server');
		proc = spawn(settings.java_bin, settings.server_launch_vars);
		process.chdir('..');

		state.percent = 0;
		state.status = 1;

		proc.stdout.on("data", data => {
		    proc_stdout(`${data}`);
		});

		proc.stderr.on("data", data => {
		    console.log(`stderr: ${data}`);
		});

		proc.on('error', (error) => {
		    console.log(`error: ${error.message}`);
		});

		proc.on("close", code => {
			server_running = false;
			start_requested = false;
			proc = null;
			state.percent = 0;
			state.status = 0;
		    console.log(`child process exited with code ${code}`);
		});
	}

	start_requested = false;

	setTimeout(serverStarter, 100); 
}

state.permissions = settings.permissions;

setTimeout(serverStarter, 0); 














/*

The following code is a slightly modified version of a part of the @rauschma/stringio npm package.
As per the licence of the library, a copy of the library's licence is providede below the code.

*/

function streamWrite(stream, chunk, encoding = 'utf8')  {
	// Get notified via callback when it’s “safe” to write again.
	// The alternatives are:
	// – 'drain' event waits until buffering is below “high water mark”
	// – callback waits until written content is unbuffered
	return streamPromiseHelper(stream, callback => stream.write(chunk, encoding, callback));
}

function streamEnd(stream) {
	return streamPromiseHelper(stream, callback => stream.end(callback));
}

function streamPromiseHelper(emitter, operation) {
	return new Promise((resolve, reject) => {
		const errListener = (err) => {
			emitter.removeListener('error', errListener);
			reject(err);
		};

		emitter.addListener('error', errListener);
		
		const callback = () => {
			emitter.removeListener('error', errListener);
			resolve(undefined);
		};
		
		operation(callback);
	});
}

/*

MIT License

Copyright (c) 2018 Axel Rauschmayer

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/